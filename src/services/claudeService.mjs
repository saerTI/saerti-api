// src/services/claudeService.mjs
import Anthropic from '@anthropic-ai/sdk';
import config from '../config/config.mjs';

// Verificar que la API key est√© configurada
if (!config.anthropic.apiKey) {
  console.error('‚ùå ANTHROPIC_API_KEY no est√° configurada en las variables de entorno');
  throw new Error('Anthropic API key is required');
}

// Inicializar cliente de Anthropic usando tu config
const anthropic = new Anthropic({
  apiKey: config.anthropic.apiKey
});

console.log('‚úÖ Cliente de Anthropic inicializado correctamente');

/**
 * Genera sugerencias presupuestarias usando Claude
 * @param {Object} projectData - Datos del proyecto
 * @param {Object} options - Opciones adicionales
 * @returns {Promise<Object>} - An√°lisis presupuestario estructurado
 */
export const generateBudgetSuggestions = async (projectData, options = {}) => {
  try {
    console.log('ü§ñ Iniciando an√°lisis con Claude para proyecto:', projectData.name || 'Sin nombre');
    
    // Construir contexto rico para Claude
    const contextPrompt = buildProjectContext(projectData, options);
    
    // Llamada a Claude API usando configuraci√≥n
    const response = await anthropic.messages.create({
      model: config.anthropic.model,
      max_tokens: config.anthropic.maxTokens,
      temperature: config.anthropic.temperature,
      system: SYSTEM_PROMPT,
      messages: [
        {
          role: "user",
          content: contextPrompt
        }
      ]
    });

    // Parsear respuesta
    const analysisText = response.content[0].text;
    console.log('‚úÖ Respuesta recibida de Claude, parseando...');
    
    // Intentar parsear JSON, con fallback a texto estructurado
    let analysis;
    try {
      analysis = JSON.parse(analysisText);
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Respuesta no es JSON v√°lido, creando estructura...');
      analysis = parseTextToStructured(analysisText);
    }

    // Agregar metadatos
    analysis.metadata = {
      generated_at: new Date().toISOString(),
      model_used: "claude-3-5-sonnet",
      project_id: projectData.id || null,
      confidence_score: calculateConfidenceScore(projectData),
      api_cost_estimate: estimateApiCost(response.usage || {})
    };

    console.log('‚úÖ An√°lisis completado exitosamente');
    return analysis;

  } catch (error) {
    console.error('‚ùå Error en generateBudgetSuggestions:', error);
    
    // Manejo espec√≠fico de errores de Anthropic
    if (error.status === 401) {
      throw new Error('API key de Anthropic inv√°lida o expirada');
    } else if (error.status === 429) {
      throw new Error('L√≠mite de rate limit alcanzado. Intente nuevamente en unos minutos');
    } else if (error.status === 400) {
      throw new Error('Datos del proyecto inv√°lidos para an√°lisis');
    }
    
    throw new Error(`Error en an√°lisis AI: ${error.message}`);
  }
};

/**
 * Construye el contexto del proyecto para Claude
 */
function buildProjectContext(projectData, options) {
  const {
    includeMarketData = true,
    includeHistoricalData = false,
    analysisDepth = 'standard'
  } = options;

  let context = `
AN√ÅLISIS PRESUPUESTARIO - PROYECTO DE CONSTRUCCI√ìN CHILE

=== DATOS DEL PROYECTO ===
Nombre: ${projectData.name || 'Proyecto sin nombre'}
Tipo: ${projectData.type || 'No especificado'}
Ubicaci√≥n: ${projectData.location || 'No especificada'}
Regi√≥n: ${extractRegion(projectData.location)}
√Årea construida: ${projectData.area || 'No especificada'} m¬≤
Presupuesto estimado: ${formatCurrency(projectData.estimatedBudget)} CLP
Fecha inicio: ${projectData.startDate || 'No especificada'}
Cliente: ${projectData.client || 'No especificado'}

=== CONTEXTO ADICIONAL ===`;

  // Agregar descripci√≥n si existe
  if (projectData.description) {
    context += `\nDescripci√≥n: ${projectData.description}`;
  }

  // Agregar datos de ubicaci√≥n espec√≠fica
  if (projectData.location) {
    context += `\n
=== FACTORES REGIONALES ===
Zona geogr√°fica: ${projectData.location}
${getRegionalFactors(projectData.location)}`;
  }

  // Agregar datos de mercado si est√° habilitado
  if (includeMarketData) {
    context += `\n
=== CONTEXTO DE MERCADO CHILE ===
${getMarketContext()}`;
  }

  // Instrucciones espec√≠ficas seg√∫n profundidad
  context += getAnalysisInstructions(analysisDepth);

  return context;
}

/**
 * System prompt especializado para an√°lisis presupuestario
 */
const SYSTEM_PROMPT = `Eres un experto en presupuestos de construcci√≥n especializado en el mercado chileno. Tu expertise incluye:

- Costos espec√≠ficos por regi√≥n de Chile
- Factores clim√°ticos y geogr√°ficos que afectan presupuestos
- Conocimiento de proveedores principales (Sodimac, Construmart, Easy)
- Regulaciones y normativas de construcci√≥n chilenas
- An√°lisis de riesgos espec√≠ficos por zona geogr√°fica

INSTRUCCIONES:
1. Analiza √öNICAMENTE proyectos de construcci√≥n
2. Proporciona estimaciones realistas basadas en el mercado chileno
3. Incluye factores de riesgo espec√≠ficos por regi√≥n
4. Sugiere contingencias apropiadas
5. Responde SIEMPRE en formato JSON estructurado

NO hagas:
- An√°lisis de otros tipos de proyectos
- Recomendaciones legales o de inversi√≥n
- Estimaciones sin suficiente informaci√≥n base`;

/**
 * Obtiene factores regionales espec√≠ficos
 */
function getRegionalFactors(location) {
  const factors = {
    'valdivia': {
      clima: '45 d√≠as lluvia/a√±o, planificar protecciones',
      logistica: 'Distancia Santiago +12% costo transporte',
      mano_obra: 'Disponibilidad limitada especializada +15%',
      sismica: 'Zona s√≠smica 3, refuerzos requeridos'
    },
    'santiago': {
      clima: 'Estable, sin factores clim√°ticos cr√≠ticos',
      logistica: 'Centro de distribuci√≥n, costos base',
      mano_obra: 'Amplia disponibilidad, precios competitivos',
      sismica: 'Zona s√≠smica 2-3, normativas estrictas'
    },
    'antofagasta': {
      clima: '√Årido, considerar protecci√≥n UV y vientos',
      logistica: 'Puerto cercano pero +18% vs Santiago',
      mano_obra: 'Alta demanda minera +25% costos',
      sismica: 'Zona s√≠smica 2, est√°ndares altos'
    }
  };

  const city = location.toLowerCase();
  const cityFactors = factors[city] || factors['santiago']; // Default Santiago
  
  return Object.entries(cityFactors)
    .map(([key, value]) => `${key.toUpperCase()}: ${value}`)
    .join('\n');
}

/**
 * Contexto general del mercado chileno
 */
function getMarketContext() {
  return `
Tendencias 2024-2025:
- Cemento: Precio estable ~$7.800/saco
- Acero: Volatilidad +/-15% por factores internacionales  
- Mano obra: Incremento 8% anual promedio
- Transportes: Combustible afecta +/-5% costos log√≠stica
- Normativas: Nueva norma s√≠smica NCh433 en vigor

Estacionalidad:
- Marzo-Mayo: Temporada √≥ptima, menor lluvia
- Junio-Agosto: Invierno, factores clim√°ticos cr√≠ticos
- Sept-Nov: Primavera, buena para fundaciones
- Dic-Feb: Verano, cuidado alta demanda mano obra`;
}

/**
 * Genera instrucciones seg√∫n profundidad de an√°lisis
 */
function getAnalysisInstructions(depth) {
  const instructions = {
    'basic': `
RESPONDE EN FORMATO JSON:
{
  "resumen_ejecutivo": "An√°lisis en 2-3 l√≠neas",
  "presupuesto_ajustado": "Monto en CLP",
  "desglose_principal": {
    "estructura": "% y monto",
    "terminaciones": "% y monto", 
    "instalaciones": "% y monto"
  },
  "factores_riesgo": ["lista de 3-5 riesgos principales"],
  "contingencia_recomendada": "% sugerido"
}`,

    'standard': `
RESPONDE EN FORMATO JSON:
{
  "resumen_ejecutivo": "An√°lisis detallado",
  "presupuesto_ajustado": "Monto ajustado en CLP",
  "desglose_detallado": {
    "estructura": {"porcentaje": "", "monto": "", "observaciones": ""},
    "alba√±iler√≠a": {"porcentaje": "", "monto": "", "observaciones": ""},
    "terminaciones": {"porcentaje": "", "monto": "", "observaciones": ""},
    "instalaciones": {"porcentaje": "", "monto": "", "observaciones": ""},
    "otros": {"porcentaje": "", "monto": "", "observaciones": ""}
  },
  "factores_regionales": {
    "climaticos": "Impacto espec√≠fico",
    "logisticos": "Sobrecostos transporte",
    "mano_obra": "Disponibilidad y precios",
    "normativos": "Regulaciones aplicables"
  },
  "analisis_riesgos": [
    {"riesgo": "", "probabilidad": "", "impacto": "", "mitigacion": ""}
  ],
  "recomendaciones": ["lista de recomendaciones espec√≠ficas"],
  "cronograma_sugerido": "Duraci√≥n estimada y fases cr√≠ticas",
  "contingencia_recomendada": "% y justificaci√≥n"
}`,

    'detailed': `
INCLUIR TAMBI√âN:
- Comparaci√≥n con proyectos similares
- An√°lisis de sensibilidad de costos
- Recomendaciones de proveedores
- Optimizaciones espec√≠ficas
- Plan de monitoreo de costos`
  };

  return instructions[depth] || instructions['standard'];
}

/**
 * Parsea texto no-JSON a estructura
 */
function parseTextToStructured(text) {
  // Implementaci√≥n b√°sica para convertir respuesta texto a JSON
  return {
    resumen_ejecutivo: "An√°lisis generado (formato texto recuperado)",
    contenido_original: text,
    presupuesto_ajustado: "Revisar manualmente",
    nota: "Respuesta requiere revisi√≥n manual - formato no est√°ndar"
  };
}

/**
 * Calcula score de confianza basado en datos disponibles
 */
function calculateConfidenceScore(projectData) {
  let score = 0;
  const factors = [
    { field: 'type', weight: 20 },
    { field: 'location', weight: 25 },
    { field: 'area', weight: 20 },
    { field: 'estimatedBudget', weight: 15 },
    { field: 'description', weight: 10 },
    { field: 'startDate', weight: 10 }
  ];

  factors.forEach(factor => {
    if (projectData[factor.field] && projectData[factor.field] !== '') {
      score += factor.weight;
    }
  });

  return Math.min(score, 100); // Cap at 100%
}

/**
 * Estima costo de la llamada API
 */
function estimateApiCost(usage) {
  const inputTokens = usage.input_tokens || 1500; // Estimado
  const outputTokens = usage.output_tokens || 1000; // Estimado
  
  const inputCost = (inputTokens / 1000000) * 3.00; // $3 per 1M input tokens
  const outputCost = (outputTokens / 1000000) * 15.00; // $15 per 1M output tokens
  
  return {
    input_tokens: inputTokens,
    output_tokens: outputTokens,
    estimated_cost_usd: inputCost + outputCost,
    estimated_cost_clp: (inputCost + outputCost) * 950 // Approx exchange rate
  };
}

/**
 * Extrae regi√≥n de ubicaci√≥n
 */
function extractRegion(location) {
  if (!location) return 'No especificada';
  
  const regions = {
    'santiago': 'Metropolitana',
    'valdivia': 'Los R√≠os', 
    'concepci√≥n': 'Biob√≠o',
    'antofagasta': 'Antofagasta',
    'valpara√≠so': 'Valpara√≠so'
  };
  
  const city = location.toLowerCase();
  return regions[city] || 'Regi√≥n no identificada';
}

/**
 * Formatea moneda chilena
 */
function formatCurrency(amount) {
  if (!amount) return 'No especificado';
  return new Intl.NumberFormat('es-CL', {
    style: 'currency',
    currency: 'CLP',
    minimumFractionDigits: 0
  }).format(amount);
}

/**
 * Genera an√°lisis detallado de PDF usando m√∫ltiples consultas a Claude
 * @param {Array} chunks - Chunks de texto del PDF
 * @param {Object} config - Configuraci√≥n del an√°lisis
 * @param {string} analysisId - ID √∫nico del an√°lisis
 * @returns {Promise<Object>} - An√°lisis consolidado
 */
export const generateDetailedPdfAnalysis = async (chunks, config, analysisId) => {
  try {
    console.log(`ü§ñ Iniciando an√°lisis detallado PDF con ${chunks.length} chunks`);
    
    const results = [];
    const consolidatedData = {
      materials: [],
      labor: [],
      equipment: [],
      providers: [],
      sections: []
    };

    // Paso 1: An√°lisis general y estructura
    console.log('üìã Fase 1: An√°lisis general del presupuesto');
    const generalAnalysis = await analyzeGeneralStructure(chunks[0]?.content || '', config);
    results.push({ type: 'general', data: generalAnalysis });

    // Paso 2: An√°lisis de chunks espec√≠ficos
    console.log('üîç Fase 2: An√°lisis detallado por secciones');
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      console.log(`üìù Procesando chunk ${i + 1}/${chunks.length} (${chunk.type})`);
      
      try {
        const chunkAnalysis = await analyzeChunkContent(chunk, config, i + 1, chunks.length);
        results.push({ 
          type: chunk.type, 
          chunkIndex: i + 1,
          data: chunkAnalysis 
        });

        // Consolidar datos espec√≠ficos
        consolidateChunkData(chunkAnalysis, consolidatedData);
        
        // Pausa peque√±a para evitar rate limiting
        if (i < chunks.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      } catch (chunkError) {
        console.warn(`‚ö†Ô∏è Error procesando chunk ${i + 1}:`, chunkError.message);
        results.push({ 
          type: chunk.type, 
          chunkIndex: i + 1,
          error: chunkError.message 
        });
      }
    }

    // Paso 3: Consolidaci√≥n final
    console.log('üîÑ Fase 3: Consolidaci√≥n y s√≠ntesis final');
    const finalConsolidation = await generateFinalConsolidation(
      consolidatedData, 
      results, 
      config
    );

    // Construir respuesta final
    const finalAnalysis = {
      resumen_ejecutivo: finalConsolidation.executive_summary,
      presupuesto_estimado: finalConsolidation.estimated_budget,
      materiales_detallados: consolidatedData.materials,
      mano_obra: consolidatedData.labor,
      equipos_maquinaria: consolidatedData.equipment,
      proveedores_chile: config.includeProviders ? consolidatedData.providers : [],
      analisis_riesgos: finalConsolidation.risk_analysis,
      recomendaciones: finalConsolidation.recommendations,
      cronograma_estimado: finalConsolidation.timeline,
      desglose_costos: finalConsolidation.cost_breakdown,
      factores_regionales: finalConsolidation.regional_factors,
      chunks_procesados: chunks.length,
      chunks_exitosos: results.filter(r => !r.error).length,
      confidence_score: calculatePdfConfidenceScore(results, consolidatedData)
    };

    console.log('‚úÖ An√°lisis PDF completado exitosamente');
    return finalAnalysis;

  } catch (error) {
    console.error('‚ùå Error en generateDetailedPdfAnalysis:', error);
    throw new Error(`Error en an√°lisis PDF: ${error.message}`);
  }
};

/**
 * Analiza la estructura general del presupuesto
 */
async function analyzeGeneralStructure(firstChunk, config) {
  const prompt = `
Analiza esta primera secci√≥n de un presupuesto de construcci√≥n chileno y identifica:

TEXTO DEL PRESUPUESTO:
${firstChunk.substring(0, 8000)}

RESPONDE EN FORMATO JSON:
{
  "tipo_proyecto": "Tipo identificado",
  "ubicacion_detectada": "Ubicaci√≥n mencionada",
  "estructura_presupuesto": {
    "tiene_materiales": true/false,
    "tiene_mano_obra": true/false,
    "tiene_equipos": true/false,
    "formato_detectado": "descripci√≥n del formato"
  },
  "presupuesto_total_estimado": "Monto si se encuentra",
  "moneda_detectada": "CLP/USD/UF",
  "observaciones_generales": ["lista de observaciones"]
}

Contexto del proyecto: ${config.projectType} en ${config.projectLocation}
Incluir factores espec√≠ficos del mercado chileno.`;

  const response = await anthropic.messages.create({
    model: config.anthropic?.model || "claude-3-5-sonnet-20241022",
    max_tokens: 2000,
    temperature: 0.3,
    system: PDF_ANALYSIS_SYSTEM_PROMPT,
    messages: [{ role: "user", content: prompt }]
  });

  return parseJsonResponse(response.content[0].text, 'general_structure');
}

/**
 * Analiza contenido espec√≠fico de cada chunk
 */
async function analyzeChunkContent(chunk, config, chunkIndex, totalChunks) {
  const sectionPrompts = {
    'materials': generateMaterialsPrompt(chunk, config, chunkIndex, totalChunks),
    'labor': generateLaborPrompt(chunk, config, chunkIndex, totalChunks),
    'equipment': generateEquipmentPrompt(chunk, config, chunkIndex, totalChunks),
    'general': generateGeneralChunkPrompt(chunk, config, chunkIndex, totalChunks)
  };

  const prompt = sectionPrompts[chunk.type] || sectionPrompts['general'];

  const response = await anthropic.messages.create({
    model: config.anthropic?.model || "claude-3-5-sonnet-20241022",
    max_tokens: 3000,
    temperature: 0.2,
    system: PDF_ANALYSIS_SYSTEM_PROMPT,
    messages: [{ role: "user", content: prompt }]
  });

  return parseJsonResponse(response.content[0].text, `chunk_${chunkIndex}`);
}

/**
 * Genera prompt especializado para materiales
 */
function generateMaterialsPrompt(chunk, config, chunkIndex, totalChunks) {
  return `
Analiza esta secci√≥n de MATERIALES de un presupuesto de construcci√≥n (Chunk ${chunkIndex}/${totalChunks}):

TEXTO:
${chunk.content}

EXTRAER EN FORMATO JSON:
{
  "materiales": [
    {
      "item": "Nombre del material",
      "descripcion": "Descripci√≥n completa",
      "cantidad": n√∫mero,
      "unidad": "m2/m3/kg/unidades/etc",
      "precio_unitario": n√∫mero,
      "subtotal": n√∫mero,
      "categoria": "hormigon/acero/madera/instalaciones/etc",
      "especificaciones": "detalles t√©cnicos",
      "proveedor_sugerido": "si se menciona"
    }
  ],
  "subtotal_seccion": n√∫mero,
  "observaciones": ["notas importantes"],
  "proveedores_mencionados": [
    {
      "nombre": "Nombre del proveedor",
      "contacto": "tel√©fono/email si disponible",
      "especialidad": "tipo de materiales"
    }
  ]
}

IMPORTANTE:
- Convertir todas las cantidades a n√∫meros
- Identificar correctamente las unidades de medida
- Calcular subtotales si no est√°n expl√≠citos
- Incluir solo materiales reales, no t√≠tulos de secci√≥n`;
}

/**
 * Genera prompt especializado para mano de obra
 */
function generateLaborPrompt(chunk, config, chunkIndex, totalChunks) {
  return `
Analiza esta secci√≥n de MANO DE OBRA de un presupuesto (Chunk ${chunkIndex}/${totalChunks}):

TEXTO:
${chunk.content}

EXTRAER EN FORMATO JSON:
{
  "mano_obra": [
    {
      "especialidad": "Alba√±il/Electricista/Plomero/etc",
      "descripcion_trabajo": "Descripci√≥n de la actividad",
      "cantidad_personas": n√∫mero,
      "horas_por_persona": n√∫mero,
      "horas_totales": n√∫mero,
      "tarifa_hora": n√∫mero,
      "tarifa_dia": n√∫mero,
      "subtotal": n√∫mero,
      "nivel_especialidad": "ayudante/oficial/maestro/jefe",
      "region_aplicable": "si se especifica"
    }
  ],
  "subtotal_mano_obra": n√∫mero,
  "observaciones": ["notas sobre rendimientos, condiciones"],
  "factores_especiales": {
    "trabajo_altura": true/false,
    "condiciones_especiales": "descripci√≥n si aplica",
    "horario_especial": "nocturno/festivo/etc"
  }
}

CONTEXTO: Proyecto ${config.projectType} en ${config.projectLocation}`;
}

/**
 * Genera prompt especializado para equipos
 */
function generateEquipmentPrompt(chunk, config, chunkIndex, totalChunks) {
  return `
Analiza esta secci√≥n de EQUIPOS/MAQUINARIA de un presupuesto (Chunk ${chunkIndex}/${totalChunks}):

TEXTO:
${chunk.content}

EXTRAER EN FORMATO JSON:
{
  "equipos": [
    {
      "tipo_equipo": "Gr√∫a/Excavadora/Mixer/etc",
      "descripcion": "Especificaciones t√©cnicas",
      "tiempo_uso": "d√≠as/horas/semanas",
      "tarifa_periodo": n√∫mero,
      "costo_transporte": n√∫mero,
      "costo_operador": n√∫mero,
      "costo_combustible": n√∫mero,
      "subtotal": n√∫mero,
      "categoria": "movimiento_tierras/elevacion/transporte/etc"
    }
  ],
  "subtotal_equipos": n√∫mero,
  "observaciones": ["notas sobre disponibilidad, condiciones"],
  "proveedores_equipos": [
    {
      "nombre": "Empresa de arriendo",
      "contacto": "si disponible",
      "especialidad": "tipo de equipos"
    }
  ]
}`;
}

/**
 * Genera prompt general para chunks no clasificados
 */
function generateGeneralChunkPrompt(chunk, config, chunkIndex, totalChunks) {
  return `
Analiza esta secci√≥n de un presupuesto de construcci√≥n (Chunk ${chunkIndex}/${totalChunks}):

TEXTO:
${chunk.content}

Identifica y extrae cualquier informaci√≥n relevante:
- Materiales y cantidades
- Mano de obra y tarifas  
- Equipos y costos
- Proveedores mencionados
- Subtotales parciales
- Observaciones t√©cnicas

RESPONDER EN FORMATO JSON con la estructura m√°s apropiada seg√∫n el contenido encontrado.`;
}

/**
 * Consolida datos de cada chunk analizado
 */
function consolidateChunkData(chunkAnalysis, consolidatedData) {
  if (chunkAnalysis.materiales) {
    consolidatedData.materials.push(...chunkAnalysis.materiales);
  }
  
  if (chunkAnalysis.mano_obra) {
    consolidatedData.labor.push(...chunkAnalysis.mano_obra);
  }
  
  if (chunkAnalysis.equipos) {
    consolidatedData.equipment.push(...chunkAnalysis.equipos);
  }
  
  if (chunkAnalysis.proveedores_mencionados) {
    consolidatedData.providers.push(...chunkAnalysis.proveedores_mencionados);
  }
}

/**
 * Genera consolidaci√≥n y s√≠ntesis final
 */
async function generateFinalConsolidation(consolidatedData, results, config) {
  const prompt = `
Bas√°ndote en el an√°lisis detallado de un presupuesto de construcci√≥n chileno, genera una s√≠ntesis final:

DATOS CONSOLIDADOS:
- Materiales encontrados: ${consolidatedData.materials.length}
- Mano de obra: ${consolidatedData.labor.length}  
- Equipos: ${consolidatedData.equipment.length}
- Proveedores: ${consolidatedData.providers.length}

MATERIALES PRINCIPALES:
${JSON.stringify(consolidatedData.materials.slice(0, 10), null, 2)}

MANO DE OBRA PRINCIPAL:
${JSON.stringify(consolidatedData.labor.slice(0, 5), null, 2)}

RESPONDE EN FORMATO JSON:
{
  "executive_summary": "Resumen ejecutivo del presupuesto en 3-4 l√≠neas",
  "estimated_budget": {
    "total_clp": n√∫mero,
    "materials_percentage": n√∫mero,
    "labor_percentage": n√∫mero,
    "equipment_percentage": n√∫mero,
    "overhead_percentage": n√∫mero
  },
  "cost_breakdown": {
    "materiales": n√∫mero,
    "mano_obra": n√∫mero,
    "equipos": n√∫mero,
    "gastos_generales": n√∫mero,
    "utilidad": n√∫mero,
    "total": n√∫mero
  },
  "risk_analysis": [
    {
      "factor": "descripci√≥n del riesgo",
      "probability": "alta/media/baja",
      "impact": "alto/medio/bajo",
      "mitigation": "estrategia de mitigaci√≥n"
    }
  ],
  "recommendations": [
    "Recomendaci√≥n espec√≠fica 1",
    "Recomendaci√≥n espec√≠fica 2",
    "Recomendaci√≥n espec√≠fica 3"
  ],
  "timeline": "Cronograma estimado en meses",
  "regional_factors": {
    "climate_impact": "Impacto clim√°tico en Chile",
    "logistics": "Consideraciones log√≠sticas",
    "local_regulations": "Regulaciones aplicables",
    "market_conditions": "Condiciones del mercado actual"
  }
}

CONTEXTO: Proyecto ${config.projectType} en ${config.projectLocation}
Considera factores espec√≠ficos del mercado de construcci√≥n chileno.`;

  const response = await anthropic.messages.create({
    model: config.anthropic?.model || "claude-3-5-sonnet-20241022",
    max_tokens: 4000,
    temperature: 0.3,
    system: PDF_ANALYSIS_SYSTEM_PROMPT,
    messages: [{ role: "user", content: prompt }]
  });

  return parseJsonResponse(response.content[0].text, 'final_consolidation');
}

/**
 * Calcula score de confianza para an√°lisis PDF
 */
function calculatePdfConfidenceScore(results, consolidatedData) {
  let score = 50; // Base score
  
  // Agregar puntos por chunks procesados exitosamente
  const successfulChunks = results.filter(r => !r.error).length;
  const totalChunks = results.length;
  score += (successfulChunks / totalChunks) * 30;
  
  // Agregar puntos por datos extra√≠dos
  if (consolidatedData.materials.length > 0) score += 10;
  if (consolidatedData.labor.length > 0) score += 10;
  if (consolidatedData.equipment.length > 0) score += 5;
  if (consolidatedData.providers.length > 0) score += 5;
  
  return Math.min(Math.round(score), 100);
}

/**
 * Parsea respuesta JSON con manejo de errores
 */
function parseJsonResponse(text, context) {
  try {
    // Buscar JSON en la respuesta
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    
    // Si no hay JSON v√°lido, crear estructura b√°sica
    console.warn(`‚ö†Ô∏è No se pudo parsear JSON en ${context}, creando estructura b√°sica`);
    return {
      raw_text: text,
      parsing_error: true,
      context: context
    };
  } catch (error) {
    console.warn(`‚ö†Ô∏è Error parseando JSON en ${context}:`, error.message);
    return {
      raw_text: text,
      parsing_error: true,
      error: error.message,
      context: context
    };
  }
}

// System prompt especializado para an√°lisis de PDFs
const PDF_ANALYSIS_SYSTEM_PROMPT = `
Eres un experto analista de presupuestos de construcci√≥n especializado en el mercado chileno. 

Tu trabajo es extraer informaci√≥n detallada y precisa de presupuestos de construcci√≥n, identificando:
- Materiales con cantidades, unidades y precios
- Mano de obra con especialidades, horas y tarifas
- Equipos con costos de arriendo y operaci√≥n
- Proveedores chilenos mencionados
- Factores regionales espec√≠ficos de Chile

IMPORTANTE:
- Siempre responde en formato JSON v√°lido
- Convierte texto a n√∫meros cuando sea apropiado
- Mant√©n consistencia en unidades de medida
- Identifica correctamente la moneda (CLP/UF/USD)
- Considera factores del mercado chileno (IVA, regulaciones, costos log√≠sticos)
- Si un dato no est√° claro, usar null en lugar de inventar valores

Para el mercado chileno considera:
- Precios incluyen/excluyen IVA
- Factores clim√°ticos por regi√≥n
- Disponibilidad de mano de obra especializada
- Costos de transporte seg√∫n ubicaci√≥n
- Regulaciones locales aplicables
`;