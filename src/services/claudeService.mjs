// src/services/claudeService.mjs
import Anthropic from '@anthropic-ai/sdk';
import config from '../config/config.mjs';

// Verificar que la API key est√© configurada
if (!config.anthropic.apiKey) {
  console.error('‚ùå ANTHROPIC_API_KEY no est√° configurada en las variables de entorno');
  throw new Error('Anthropic API key is required');
}

// Inicializar cliente de Anthropic usando tu config
const anthropic = new Anthropic({
  apiKey: config.anthropic.apiKey
});

console.log('‚úÖ Cliente de Anthropic inicializado correctamente');

/**
 * Genera sugerencias presupuestarias usando Claude
 * @param {Object} projectData - Datos del proyecto
 * @param {Object} options - Opciones adicionales
 * @returns {Promise<Object>} - An√°lisis presupuestario estructurado
 */
export const generateBudgetSuggestions = async (projectData, options = {}) => {
  try {
    console.log('ü§ñ Iniciando an√°lisis con Claude para proyecto:', projectData.name || 'Sin nombre');
    
    // Construir contexto rico para Claude
    const contextPrompt = buildProjectContext(projectData, options);
    
    // Llamada a Claude API usando configuraci√≥n
    const response = await anthropic.messages.create({
      model: config.anthropic.model,
      max_tokens: config.anthropic.maxTokens,
      temperature: config.anthropic.temperature,
      system: SYSTEM_PROMPT,
      messages: [
        {
          role: "user",
          content: contextPrompt
        }
      ]
    });

    // Parsear respuesta
    const analysisText = response.content[0].text;
    console.log('‚úÖ Respuesta recibida de Claude, parseando...');
    
    // Intentar parsear JSON, con fallback a texto estructurado
    let analysis;
    try {
      analysis = JSON.parse(analysisText);
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Respuesta no es JSON v√°lido, creando estructura...');
      analysis = parseTextToStructured(analysisText);
    }

    // Agregar metadatos
    analysis.metadata = {
      generated_at: new Date().toISOString(),
      model_used: "claude-3-5-sonnet",
      project_id: projectData.id || null,
      confidence_score: calculateConfidenceScore(projectData),
      api_cost_estimate: estimateApiCost(response.usage || {})
    };

    console.log('‚úÖ An√°lisis completado exitosamente');
    return analysis;

  } catch (error) {
    console.error('‚ùå Error en generateBudgetSuggestions:', error);
    
    // Manejo espec√≠fico de errores de Anthropic
    if (error.status === 401) {
      throw new Error('API key de Anthropic inv√°lida o expirada');
    } else if (error.status === 429) {
      throw new Error('L√≠mite de rate limit alcanzado. Intente nuevamente en unos minutos');
    } else if (error.status === 400) {
      throw new Error('Datos del proyecto inv√°lidos para an√°lisis');
    }
    
    throw new Error(`Error en an√°lisis AI: ${error.message}`);
  }
};

/**
 * Construye el contexto del proyecto para Claude
 */
function buildProjectContext(projectData, options) {
  const {
    includeMarketData = true,
    includeHistoricalData = false,
    analysisDepth = 'standard'
  } = options;

  let context = `
AN√ÅLISIS PRESUPUESTARIO - PROYECTO DE CONSTRUCCI√ìN CHILE

=== DATOS DEL PROYECTO ===
Nombre: ${projectData.name || 'Proyecto sin nombre'}
Tipo: ${projectData.type || 'No especificado'}
Ubicaci√≥n: ${projectData.location || 'No especificada'}
Regi√≥n: ${extractRegion(projectData.location)}
√Årea construida: ${projectData.area || 'No especificada'} m¬≤
Presupuesto estimado: ${formatCurrency(projectData.estimatedBudget)} CLP
Fecha inicio: ${projectData.startDate || 'No especificada'}
Cliente: ${projectData.client || 'No especificado'}

=== CONTEXTO ADICIONAL ===`;

  // Agregar descripci√≥n si existe
  if (projectData.description) {
    context += `\nDescripci√≥n: ${projectData.description}`;
  }

  // Agregar datos de ubicaci√≥n espec√≠fica
  if (projectData.location) {
    context += `\n
=== FACTORES REGIONALES ===
Zona geogr√°fica: ${projectData.location}
${getRegionalFactors(projectData.location)}`;
  }

  // Agregar datos de mercado si est√° habilitado
  if (includeMarketData) {
    context += `\n
=== CONTEXTO DE MERCADO CHILE ===
${getMarketContext()}`;
  }

  // Instrucciones espec√≠ficas seg√∫n profundidad
  context += getAnalysisInstructions(analysisDepth);

  return context;
}

/**
 * System prompt especializado para an√°lisis presupuestario
 */
const SYSTEM_PROMPT = `Eres un experto en presupuestos de construcci√≥n especializado en el mercado chileno. Tu expertise incluye:

- Costos espec√≠ficos por regi√≥n de Chile
- Factores clim√°ticos y geogr√°ficos que afectan presupuestos
- Conocimiento de proveedores principales (Sodimac, Construmart, Easy)
- Regulaciones y normativas de construcci√≥n chilenas
- An√°lisis de riesgos espec√≠ficos por zona geogr√°fica

INSTRUCCIONES:
1. Analiza √öNICAMENTE proyectos de construcci√≥n
2. Proporciona estimaciones realistas basadas en el mercado chileno
3. Incluye factores de riesgo espec√≠ficos por regi√≥n
4. Sugiere contingencias apropiadas
5. Responde SIEMPRE en formato JSON estructurado

NO hagas:
- An√°lisis de otros tipos de proyectos
- Recomendaciones legales o de inversi√≥n
- Estimaciones sin suficiente informaci√≥n base`;

/**
 * Obtiene factores regionales espec√≠ficos
 */
function getRegionalFactors(location) {
  const factors = {
    'valdivia': {
      clima: '45 d√≠as lluvia/a√±o, planificar protecciones',
      logistica: 'Distancia Santiago +12% costo transporte',
      mano_obra: 'Disponibilidad limitada especializada +15%',
      sismica: 'Zona s√≠smica 3, refuerzos requeridos'
    },
    'santiago': {
      clima: 'Estable, sin factores clim√°ticos cr√≠ticos',
      logistica: 'Centro de distribuci√≥n, costos base',
      mano_obra: 'Amplia disponibilidad, precios competitivos',
      sismica: 'Zona s√≠smica 2-3, normativas estrictas'
    },
    'antofagasta': {
      clima: '√Årido, considerar protecci√≥n UV y vientos',
      logistica: 'Puerto cercano pero +18% vs Santiago',
      mano_obra: 'Alta demanda minera +25% costos',
      sismica: 'Zona s√≠smica 2, est√°ndares altos'
    }
  };

  const city = location.toLowerCase();
  const cityFactors = factors[city] || factors['santiago']; // Default Santiago
  
  return Object.entries(cityFactors)
    .map(([key, value]) => `${key.toUpperCase()}: ${value}`)
    .join('\n');
}

/**
 * Contexto general del mercado chileno
 */
function getMarketContext() {
  return `
Tendencias 2024-2025:
- Cemento: Precio estable ~$7.800/saco
- Acero: Volatilidad +/-15% por factores internacionales  
- Mano obra: Incremento 8% anual promedio
- Transportes: Combustible afecta +/-5% costos log√≠stica
- Normativas: Nueva norma s√≠smica NCh433 en vigor

Estacionalidad:
- Marzo-Mayo: Temporada √≥ptima, menor lluvia
- Junio-Agosto: Invierno, factores clim√°ticos cr√≠ticos
- Sept-Nov: Primavera, buena para fundaciones
- Dic-Feb: Verano, cuidado alta demanda mano obra`;
}

/**
 * Genera instrucciones seg√∫n profundidad de an√°lisis
 */
function getAnalysisInstructions(depth) {
  const instructions = {
    'basic': `
RESPONDE EN FORMATO JSON:
{
  "resumen_ejecutivo": "An√°lisis en 2-3 l√≠neas",
  "presupuesto_ajustado": "Monto en CLP",
  "desglose_principal": {
    "estructura": "% y monto",
    "terminaciones": "% y monto", 
    "instalaciones": "% y monto"
  },
  "factores_riesgo": ["lista de 3-5 riesgos principales"],
  "contingencia_recomendada": "% sugerido"
}`,

    'standard': `
RESPONDE EN FORMATO JSON:
{
  "resumen_ejecutivo": "An√°lisis detallado",
  "presupuesto_ajustado": "Monto ajustado en CLP",
  "desglose_detallado": {
    "estructura": {"porcentaje": "", "monto": "", "observaciones": ""},
    "alba√±iler√≠a": {"porcentaje": "", "monto": "", "observaciones": ""},
    "terminaciones": {"porcentaje": "", "monto": "", "observaciones": ""},
    "instalaciones": {"porcentaje": "", "monto": "", "observaciones": ""},
    "otros": {"porcentaje": "", "monto": "", "observaciones": ""}
  },
  "factores_regionales": {
    "climaticos": "Impacto espec√≠fico",
    "logisticos": "Sobrecostos transporte",
    "mano_obra": "Disponibilidad y precios",
    "normativos": "Regulaciones aplicables"
  },
  "analisis_riesgos": [
    {"riesgo": "", "probabilidad": "", "impacto": "", "mitigacion": ""}
  ],
  "recomendaciones": ["lista de recomendaciones espec√≠ficas"],
  "cronograma_sugerido": "Duraci√≥n estimada y fases cr√≠ticas",
  "contingencia_recomendada": "% y justificaci√≥n"
}`,

    'detailed': `
INCLUIR TAMBI√âN:
- Comparaci√≥n con proyectos similares
- An√°lisis de sensibilidad de costos
- Recomendaciones de proveedores
- Optimizaciones espec√≠ficas
- Plan de monitoreo de costos`
  };

  return instructions[depth] || instructions['standard'];
}

/**
 * Parsea texto no-JSON a estructura
 */
function parseTextToStructured(text) {
  // Implementaci√≥n b√°sica para convertir respuesta texto a JSON
  return {
    resumen_ejecutivo: "An√°lisis generado (formato texto recuperado)",
    contenido_original: text,
    presupuesto_ajustado: "Revisar manualmente",
    nota: "Respuesta requiere revisi√≥n manual - formato no est√°ndar"
  };
}

/**
 * Calcula score de confianza basado en datos disponibles
 */
function calculateConfidenceScore(projectData) {
  let score = 0;
  const factors = [
    { field: 'type', weight: 20 },
    { field: 'location', weight: 25 },
    { field: 'area', weight: 20 },
    { field: 'estimatedBudget', weight: 15 },
    { field: 'description', weight: 10 },
    { field: 'startDate', weight: 10 }
  ];

  factors.forEach(factor => {
    if (projectData[factor.field] && projectData[factor.field] !== '') {
      score += factor.weight;
    }
  });

  return Math.min(score, 100); // Cap at 100%
}

/**
 * Estima costo de la llamada API
 */
function estimateApiCost(usage) {
  const inputTokens = usage.input_tokens || 1500; // Estimado
  const outputTokens = usage.output_tokens || 1000; // Estimado
  
  const inputCost = (inputTokens / 1000000) * 3.00; // $3 per 1M input tokens
  const outputCost = (outputTokens / 1000000) * 15.00; // $15 per 1M output tokens
  
  return {
    input_tokens: inputTokens,
    output_tokens: outputTokens,
    estimated_cost_usd: inputCost + outputCost,
    estimated_cost_clp: (inputCost + outputCost) * 950 // Approx exchange rate
  };
}

/**
 * Extrae regi√≥n de ubicaci√≥n
 */
function extractRegion(location) {
  if (!location) return 'No especificada';
  
  const regions = {
    'santiago': 'Metropolitana',
    'valdivia': 'Los R√≠os', 
    'concepci√≥n': 'Biob√≠o',
    'antofagasta': 'Antofagasta',
    'valpara√≠so': 'Valpara√≠so'
  };
  
  const city = location.toLowerCase();
  return regions[city] || 'Regi√≥n no identificada';
}

/**
 * Formatea moneda chilena
 */
function formatCurrency(amount) {
  if (!amount) return 'No especificado';
  return new Intl.NumberFormat('es-CL', {
    style: 'currency',
    currency: 'CLP',
    minimumFractionDigits: 0
  }).format(amount);
}