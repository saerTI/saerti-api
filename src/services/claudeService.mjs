// src/services/claudeService.mjs
// üî• VERSI√ìN LIMPIA - SOLO FUNCIONES UTILIZADAS
import config from '../config/config.mjs';
import Anthropic from '@anthropic-ai/sdk';

// Verificar que la API key est√© configurada
if (!config.anthropic.apiKey) {
  console.error('‚ùå ANTHROPIC_API_KEY no est√° configurada en las variables de entorno');
  throw new Error('Anthropic API key is required');
}

// Inicializar cliente de Anthropic usando tu config
const anthropic = new Anthropic({
  apiKey: config.anthropic.apiKey
});

console.log('‚úÖ Cliente de Anthropic inicializado correctamente');

/**
 * üî• FUNCI√ìN PRINCIPAL 1: Genera sugerencias presupuestarias usando Claude
 * @param {Object} projectData - Datos del proyecto
 * @param {Object} options - Opciones adicionales
 * @returns {Promise<Object>} - An√°lisis presupuestario estructurado
 */
export const generateBudgetSuggestions = async (projectData, options = {}) => {
  try {
    console.log(`ü§ñ Iniciando an√°lisis con ${config.anthropic.model} para:`, projectData.description || projectData.type);
    
    // üî• VALIDACI√ìN PREVIA
    if (!projectData || !projectData.type) {
      throw new Error('Datos de proyecto inv√°lidos - tipo requerido');
    }
    
    const contextPrompt = buildProjectContext(projectData, options);
    
    // üî• LLAMADA A API CON MANEJO DE ERRORES ROBUSTO
    const response = await anthropic.messages.create({
      model: config.anthropic.model,
      max_tokens: config.anthropic.maxTokens,
      temperature: config.anthropic.temperature,
      system: SYSTEM_PROMPT,
      messages: [{
        role: "user",
        content: contextPrompt
      }]
    });

    if (!response || !response.content || !response.content[0]) {
      throw new Error('Respuesta inv√°lida de la API de Anthropic');
    }

    const analysisText = response.content[0].text;
    console.log(`‚úÖ ${config.anthropic.model} complet√≥ an√°lisis manual`);
    
    // üî• PARSEO MEJORADO CON FALLBACKS
    let analysis;
    try {
      const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0]);
        console.log('‚úÖ JSON parseado exitosamente');
      } else {
        throw new Error('No JSON found in response');
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Respuesta no es JSON v√°lido, creando estructura...');
      analysis = parseTextToStructured(analysisText);
    }

    // üî• METADATA MEJORADA
    analysis.metadata = {
      generated_at: new Date().toISOString(),
      model_used: config.anthropic.model,
      project_id: projectData.id || null,
      confidence_score: calculateConfidenceScore(projectData),
      api_cost_estimate: estimateApiCost(response.usage || {}),
      processing_time_ms: Date.now() - Date.now(),
      success: true
    };

    console.log('‚úÖ An√°lisis completado exitosamente');
    return analysis;

  } catch (error) {
    console.error('‚ùå Error en generateBudgetSuggestions:', error);
    
    // üî• MANEJO ESPEC√çFICO DE ERRORES DE ANTHROPIC
    if (error.status === 404) {
      throw new Error(`Modelo no v√°lido: ${config.anthropic.model}. Verifique la configuraci√≥n.`);
    }
    
    if (error.status === 401) {
      throw new Error('API Key de Anthropic inv√°lida o sin permisos');
    }
    
    if (error.status === 429) {
      throw new Error('L√≠mite de rate limit alcanzado en Anthropic API');
    }
    
    if (error.status === 400) {
      throw new Error(`Error en la solicitud a Anthropic: ${error.message}`);
    }
    
    // Error gen√©rico
    throw new Error(`Error en an√°lisis presupuestario: ${error.message}`);
  }
};

/**
 * üî• FUNCI√ìN PRINCIPAL 2: Genera an√°lisis detallado de PDF usando m√∫ltiples consultas a Claude
 * @param {Array} chunks - Chunks de texto del PDF
 * @param {Object} config - Configuraci√≥n del an√°lisis
 * @param {Object} analysisConfig - Configuraci√≥n espec√≠fica del an√°lisis
 * @param {string} analysisId - ID √∫nico del an√°lisis
 * @returns {Promise<Object>} - An√°lisis consolidado
 */
export const generateDetailedPdfAnalysis = async (chunks, config, analysisConfig, analysisId) => {
  try {
    console.log(`ü§ñ Iniciando an√°lisis detallado PDF con ${chunks.length} chunks`);
    
    if (!chunks || chunks.length === 0) {
      throw new Error('No hay chunks para analizar');
    }
    
    const results = [];
    const consolidatedData = {
      materials: [],
      labor: [],
      equipment: [],
      providers: [],
      sections: []
    };

    // üî• AN√ÅLISIS GENERAL CON VALIDACIONES
    console.log('üìã Fase 1: An√°lisis general del presupuesto');
    try {
      const generalAnalysis = await analyzeGeneralStructure(chunks[0]?.content || '', config);
      results.push({ type: 'general', data: generalAnalysis });
    } catch (generalError) {
      console.warn('‚ö†Ô∏è Error en an√°lisis general:', generalError.message);
      results.push({ type: 'general', error: generalError.message });
    }

    // üî• AN√ÅLISIS DE CHUNKS CON L√çMITES Y TIMEOUTS
    console.log('üîç Fase 2: An√°lisis detallado por secciones');
    for (let i = 0; i < Math.min(chunks.length, 10); i++) { // Limitar a 10 chunks m√°ximo
      const chunk = chunks[i];
      console.log(`üìù Procesando chunk ${i + 1}/${Math.min(chunks.length, 10)} (${chunk.type})`);
      
      try {
        const chunkAnalysis = await analyzeChunkContent(chunk, config, i + 1, chunks.length);
        results.push({ 
          type: chunk.type, 
          chunkIndex: i + 1,
          data: chunkAnalysis 
        });

        // Consolidar datos espec√≠ficos
        consolidateChunkData(chunkAnalysis, consolidatedData);
        
        // üî• PAUSA OBLIGATORIA PARA EVITAR RATE LIMITING
        if (i < Math.min(chunks.length, 10) - 1) {
          console.log('‚è≥ Pausa para rate limiting...');
          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 segundos
        }
        
      } catch (chunkError) {
        console.warn(`‚ö†Ô∏è Error procesando chunk ${i + 1}:`, chunkError.message);
        results.push({ 
          type: chunk.type, 
          chunkIndex: i + 1,
          error: chunkError.message 
        });
      }
    }

    // üî• CONSOLIDACI√ìN FINAL CON VALIDACIONES
    console.log('üîÑ Fase 3: Consolidaci√≥n y s√≠ntesis final');
    let finalConsolidation;
    try {
      finalConsolidation = await generateFinalConsolidation(
        consolidatedData, 
        results, 
        config
      );
    } catch (consolidationError) {
      console.warn('‚ö†Ô∏è Error en consolidaci√≥n final:', consolidationError.message);
      finalConsolidation = createFallbackConsolidation(consolidatedData, results);
    }

    // üî• RESPUESTA FINAL ROBUSTA
    const finalAnalysis = {
      resumen_ejecutivo: finalConsolidation.executive_summary || "An√°lisis completado con datos parciales",
      presupuesto_estimado: finalConsolidation.estimated_budget || { total_clp: 0 },
      materiales_detallados: consolidatedData.materials || [],
      mano_obra: consolidatedData.labor || [],
      equipos_maquinaria: consolidatedData.equipment || [],
      proveedores_chile: analysisConfig.includeProviders ? consolidatedData.providers : [],
      analisis_riesgos: finalConsolidation.risk_analysis || [],
      recomendaciones: finalConsolidation.recommendations || [],
      cronograma_estimado: finalConsolidation.timeline || "Requiere an√°lisis adicional",
      desglose_costos: finalConsolidation.cost_breakdown || {},
      factores_regionales: finalConsolidation.regional_factors || {},
      chunks_procesados: Math.min(chunks.length, 10),
      chunks_exitosos: results.filter(r => !r.error).length,
      confidence_score: calculatePdfConfidenceScore(results, consolidatedData),
      metadata: {
        analysis_id: analysisId,
        model_used: config.anthropic.model,
        processing_time: new Date().toISOString(),
        success: true
      }
    };

    console.log('‚úÖ An√°lisis PDF completado exitosamente');
    return finalAnalysis;

  } catch (error) {
    console.error('‚ùå Error en generateDetailedPdfAnalysis:', error);
    
    // üî• RETORNAR ERROR ESTRUCTURADO EN LUGAR DE FALLAR
    return {
      error: true,
      message: error.message,
      resumen_ejecutivo: "Error en el an√°lisis del PDF",
      presupuesto_estimado: { total_clp: 0, error: true },
      materiales_detallados: [],
      mano_obra: [],
      equipos_maquinaria: [],
      analisis_riesgos: [{
        factor: "Error en procesamiento",
        probability: "alta",
        impact: "alto",
        mitigation: "Revisar archivo y reintentar"
      }],
      recomendaciones: ["Verificar que el archivo PDF no est√© corrupto", "Intentar con un archivo m√°s peque√±o"],
      confidence_score: 0,
      metadata: {
        error: true,
        error_message: error.message,
        model_used: config.anthropic.model,
        processing_time: new Date().toISOString()
      }
    };
  }
};

// ====================================================================
// üîß FUNCIONES AUXILIARES INTERNAS (SOLO LAS QUE SE USAN)
// ====================================================================

/**
 * Construye el contexto del proyecto para Claude
 */
function buildProjectContext(projectData, options = {}) {
  console.log('üîç Construyendo contexto para:', {
    type: projectData.type,
    location: projectData.location,
    area: projectData.area,
    description: projectData.description
  });

  return `
ANALIZAR PRESUPUESTO DE CONSTRUCCI√ìN

PROYECTO ESPEC√çFICO:
- Tipo: ${projectData.type || 'No especificado'}
- Ubicaci√≥n: ${projectData.location || 'No especificada'}
- √Årea: ${projectData.area || 0} m¬≤
- Descripci√≥n: ${projectData.description || 'Sin descripci√≥n'}
- Presupuesto estimado: $${(projectData.estimatedBudget || 0).toLocaleString('es-CL')} CLP

CONTEXTO ESPEC√çFICO:
${projectData.description || `Proyecto ${projectData.type} de ${projectData.area}m¬≤ en ${projectData.location}`}

PAR√ÅMETROS:
- Profundidad: ${options.analysisDepth || 'standard'}
- Incluir datos de mercado: ${options.includeMarketData ? 'S√≠' : 'No'}
- Incluir proveedores: ${options.includeProviders ? 'S√≠' : 'No'}

RESPONDER EN JSON:
{
  "resumen_ejecutivo": "An√°lisis espec√≠fico del proyecto",
  "presupuesto_ajustado": "Monto en CLP",
  "desglose_detallado": {
    "estructura": {"porcentaje": "X%", "monto": "$X CLP"},
    "terminaciones": {"porcentaje": "X%", "monto": "$X CLP"},
    "instalaciones": {"porcentaje": "X%", "monto": "$X CLP"}
  },
  "factores_regionales": {
    "climaticos": "factores del clima en ${projectData.location}",
    "logisticos": "consideraciones log√≠sticas",
    "mano_obra": "disponibilidad en ${projectData.location}"
  },
  "recomendaciones": ["recomendaciones espec√≠ficas"],
  "cronograma_sugerido": "tiempo estimado para ${projectData.type}",
  "confidence_score": n√∫mero
}
`;
}

/**
 * Parsea texto no-JSON a estructura
 */
function parseTextToStructured(text) {
  return {
    resumen_ejecutivo: "An√°lisis generado (formato texto recuperado)",
    contenido_original: text,
    presupuesto_ajustado: "Revisar manualmente",
    nota: "Respuesta requiere revisi√≥n manual - formato no est√°ndar"
  };
}

/**
 * Calcula score de confianza basado en datos disponibles
 */
function calculateConfidenceScore(projectData) {
  let score = 0;
  const factors = [
    { field: 'type', weight: 20 },
    { field: 'location', weight: 25 },
    { field: 'area', weight: 20 },
    { field: 'estimatedBudget', weight: 15 },
    { field: 'description', weight: 10 },
    { field: 'startDate', weight: 10 }
  ];

  factors.forEach(factor => {
    if (projectData[factor.field] && projectData[factor.field] !== '') {
      score += factor.weight;
    }
  });

  return Math.min(score, 100); // Cap at 100%
}

/**
 * Estima costo de la llamada API
 */
function estimateApiCost(usage) {
  const inputTokens = usage.input_tokens || 1500; // Estimado
  const outputTokens = usage.output_tokens || 1000; // Estimado
  
  const inputCost = (inputTokens / 1000000) * 3.00; // $3 per 1M input tokens
  const outputCost = (outputTokens / 1000000) * 15.00; // $15 per 1M output tokens
  
  return {
    input_tokens: inputTokens,
    output_tokens: outputTokens,
    estimated_cost_usd: inputCost + outputCost,
    estimated_cost_clp: (inputCost + outputCost) * 950 // Approx exchange rate
  };
}

/**
 * Analiza la estructura general del presupuesto
 */
async function analyzeGeneralStructure(firstChunk, config) {
  if (!firstChunk || firstChunk.length < 10) {
    throw new Error('Chunk vac√≠o o muy peque√±o para an√°lisis');
  }

  const prompt = `
Analiza esta primera secci√≥n de un presupuesto de construcci√≥n chileno:

TEXTO DEL PRESUPUESTO:
${firstChunk.substring(0, 8000)}

RESPONDE EN FORMATO JSON:
{
  "tipo_proyecto": "Tipo identificado",
  "ubicacion_detectada": "Ubicaci√≥n mencionada",
  "estructura_presupuesto": {
    "tiene_materiales": true/false,
    "tiene_mano_obra": true/false,
    "tiene_equipos": true/false,
    "formato_detectado": "descripci√≥n del formato"
  },
  "presupuesto_total_estimado": "Monto si se encuentra",
  "moneda_detectada": "CLP/USD/UF",
  "observaciones_generales": ["lista de observaciones"]
}

Contexto del proyecto: ${config.projectType} en ${config.projectLocation}`;

  const response = await anthropic.messages.create({
    model: config.anthropic.model,
    max_tokens: 2000,
    temperature: 0.3,
    system: PDF_ANALYSIS_SYSTEM_PROMPT,
    messages: [{ role: "user", content: prompt }]
  });

  return parseJsonResponse(response.content[0].text, 'general_structure');
}

/**
 * Analiza contenido espec√≠fico de cada chunk
 */
async function analyzeChunkContent(chunk, config, chunkIndex, totalChunks) {
  const prompt = `
Analiza esta secci√≥n de un presupuesto de construcci√≥n (Chunk ${chunkIndex}/${totalChunks}):

TEXTO:
${chunk.content}

Identifica y extrae cualquier informaci√≥n relevante:
- Materiales y cantidades
- Mano de obra y tarifas  
- Equipos y costos
- Proveedores mencionados
- Subtotales parciales
- Observaciones t√©cnicas

RESPONDER EN FORMATO JSON con la estructura m√°s apropiada seg√∫n el contenido encontrado.`;

  const response = await anthropic.messages.create({
    model: config.anthropic.model,
    max_tokens: 3000,
    temperature: 0.2,
    system: PDF_ANALYSIS_SYSTEM_PROMPT,
    messages: [{ role: "user", content: prompt }]
  });

  return parseJsonResponse(response.content[0].text, `chunk_${chunkIndex}`);
}

/**
 * Consolida datos de cada chunk analizado
 */
function consolidateChunkData(chunkAnalysis, consolidatedData) {
  if (chunkAnalysis.materiales) {
    consolidatedData.materials.push(...chunkAnalysis.materiales);
  }
  
  if (chunkAnalysis.mano_obra) {
    consolidatedData.labor.push(...chunkAnalysis.mano_obra);
  }
  
  if (chunkAnalysis.equipos) {
    consolidatedData.equipment.push(...chunkAnalysis.equipos);
  }
  
  if (chunkAnalysis.proveedores_mencionados) {
    consolidatedData.providers.push(...chunkAnalysis.proveedores_mencionados);
  }
}

/**
 * Genera consolidaci√≥n y s√≠ntesis final
 */
async function generateFinalConsolidation(consolidatedData, results, config) {
  const prompt = `
Bas√°ndote en el an√°lisis detallado de un presupuesto de construcci√≥n chileno, genera una s√≠ntesis final:

DATOS CONSOLIDADOS:
- Materiales encontrados: ${consolidatedData.materials.length}
- Mano de obra: ${consolidatedData.labor.length}  
- Equipos: ${consolidatedData.equipment.length}
- Proveedores: ${consolidatedData.providers.length}

MATERIALES PRINCIPALES:
${JSON.stringify(consolidatedData.materials.slice(0, 10), null, 2)}

MANO DE OBRA PRINCIPAL:
${JSON.stringify(consolidatedData.labor.slice(0, 5), null, 2)}

RESPONDE EN FORMATO JSON:
{
  "executive_summary": "Resumen ejecutivo del presupuesto en 3-4 l√≠neas",
  "estimated_budget": {
    "total_clp": n√∫mero,
    "materials_percentage": n√∫mero,
    "labor_percentage": n√∫mero,
    "equipment_percentage": n√∫mero,
    "overhead_percentage": n√∫mero
  },
  "cost_breakdown": {
    "materiales": n√∫mero,
    "mano_obra": n√∫mero,
    "equipos": n√∫mero,
    "gastos_generales": n√∫mero,
    "utilidad": n√∫mero,
    "total": n√∫mero
  },
  "risk_analysis": [
    {
      "factor": "descripci√≥n del riesgo",
      "probability": "alta/media/baja",
      "impact": "alto/medio/bajo",
      "mitigation": "estrategia de mitigaci√≥n"
    }
  ],
  "recommendations": [
    "Recomendaci√≥n espec√≠fica 1",
    "Recomendaci√≥n espec√≠fica 2",
    "Recomendaci√≥n espec√≠fica 3"
  ],
  "timeline": "Cronograma estimado en meses",
  "regional_factors": {
    "climate_impact": "Impacto clim√°tico en Chile",
    "logistics": "Consideraciones log√≠sticas",
    "local_regulations": "Regulaciones aplicables",
    "market_conditions": "Condiciones del mercado actual"
  }
}

CONTEXTO: Proyecto ${config.projectType} en ${config.projectLocation}
Considera factores espec√≠ficos del mercado de construcci√≥n chileno.`;

  const response = await anthropic.messages.create({
    model: config.anthropic.model,
    max_tokens: 4000,
    temperature: 0.3,
    system: PDF_ANALYSIS_SYSTEM_PROMPT,
    messages: [{ role: "user", content: prompt }]
  });

  return parseJsonResponse(response.content[0].text, 'final_consolidation');
}

/**
 * Crea consolidaci√≥n de fallback cuando hay errores
 */
function createFallbackConsolidation(consolidatedData, results) {
  return {
    executive_summary: `An√°lisis parcialmente completado. Procesados ${results.length} chunks con ${results.filter(r => !r.error).length} exitosos.`,
    estimated_budget: {
      total_clp: 0,
      note: "Estimaci√≥n requiere an√°lisis manual"
    },
    risk_analysis: [{
      factor: "An√°lisis incompleto",
      probability: "alta", 
      impact: "medio",
      mitigation: "Revisar y procesar nuevamente el documento"
    }],
    recommendations: [
      "Verificar la calidad del documento PDF",
      "Considerar dividir documentos muy largos",
      "Revisar manualmente los datos extra√≠dos"
    ],
    timeline: "Requiere an√°lisis adicional",
    cost_breakdown: {},
    regional_factors: {
      note: "Factores regionales requieren an√°lisis manual"
    }
  };
}

/**
 * Calcula score de confianza para an√°lisis PDF
 */
function calculatePdfConfidenceScore(results, consolidatedData) {
  let score = 50; // Base score
  
  // Agregar puntos por chunks procesados exitosamente
  const successfulChunks = results.filter(r => !r.error).length;
  const totalChunks = results.length;
  score += (successfulChunks / totalChunks) * 30;
  
  // Agregar puntos por datos extra√≠dos
  if (consolidatedData.materials.length > 0) score += 10;
  if (consolidatedData.labor.length > 0) score += 10;
  if (consolidatedData.equipment.length > 0) score += 5;
  if (consolidatedData.providers.length > 0) score += 5;
  
  return Math.min(Math.round(score), 100);
}

/**
 * Parsea respuesta JSON con manejo de errores
 */
function parseJsonResponse(text, context) {
  try {
    // Buscar JSON en la respuesta
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    
    // Si no hay JSON v√°lido, crear estructura b√°sica
    console.warn(`‚ö†Ô∏è No se pudo parsear JSON en ${context}, creando estructura b√°sica`);
    return {
      raw_text: text,
      parsing_error: true,
      context: context
    };
  } catch (error) {
    console.warn(`‚ö†Ô∏è Error parseando JSON en ${context}:`, error.message);
    return {
      raw_text: text,
      parsing_error: true,
      error: error.message,
      context: context
    };
  }
}

// ====================================================================
// üéØ PROMPTS Y CONFIGURACIONES
// ====================================================================

/**
 * System prompt especializado para an√°lisis presupuestario
 */
const SYSTEM_PROMPT = `Eres un experto en presupuestos de construcci√≥n especializado en el mercado chileno. Tu expertise incluye:

- Costos espec√≠ficos por regi√≥n de Chile
- Factores clim√°ticos y geogr√°ficos que afectan presupuestos
- Conocimiento de proveedores principales (Sodimac, Construmart, Easy)
- Regulaciones y normativas de construcci√≥n chilenas
- An√°lisis de riesgos espec√≠ficos por zona geogr√°fica

INSTRUCCIONES:
1. Analiza √öNICAMENTE proyectos de construcci√≥n
2. Proporciona estimaciones realistas basadas en el mercado chileno
3. Incluye factores de riesgo espec√≠ficos por regi√≥n
4. Sugiere contingencias apropiadas
5. Responde SIEMPRE en formato JSON estructurado

NO hagas:
- An√°lisis de otros tipos de proyectos
- Recomendaciones legales o de inversi√≥n
- Estimaciones sin suficiente informaci√≥n base`;

/**
 * System prompt especializado para an√°lisis de PDFs
 */
const PDF_ANALYSIS_SYSTEM_PROMPT = `
Eres un experto analista de presupuestos de construcci√≥n especializado en el mercado chileno. 

Tu trabajo es extraer informaci√≥n detallada y precisa de presupuestos de construcci√≥n, identificando:
- Materiales con cantidades, unidades y precios
- Mano de obra con especialidades, horas y tarifas
- Equipos con costos de arriendo y operaci√≥n
- Proveedores chilenos mencionados
- Factores regionales espec√≠ficos de Chile

IMPORTANTE:
- Siempre responde en formato JSON v√°lido
- Convierte texto a n√∫meros cuando sea apropiado
- Mant√©n consistencia en unidades de medida
- Identifica correctamente la moneda (CLP/UF/USD)
- Considera factores del mercado chileno (IVA, regulaciones, costos log√≠sticos)
- Si un dato no est√° claro, usar null en lugar de inventar valores

Para el mercado chileno considera:
- Precios incluyen/excluyen IVA
- Factores clim√°ticos por regi√≥n
- Disponibilidad de mano de obra especializada
- Costos de transporte seg√∫n ubicaci√≥n
- Regulaciones locales aplicables
`;